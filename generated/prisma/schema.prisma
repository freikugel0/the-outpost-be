// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      Role      @default(USER)
  point     Int       @default(0)
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  orders             Order[]
  passwordResetToken PasswordResetToken?
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model Product {
  id        Int       @id @default(autoincrement())
  name      String
  desc      String
  price     Float
  stock     Int       @default(0)
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  orderItems OrderItem[]
}

model Order {
  id         Int      @id @default(autoincrement())
  totalPrice Float    @default(0)
  createdAt  DateTime @default(now())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  items OrderItem[]
}

model OrderItem {
  id         Int   @id @default(autoincrement())
  quantity   Int   @default(1)
  unitPrice  Float
  totalPrice Float

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}
